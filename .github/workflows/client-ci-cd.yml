name: Client CI/CD

on:
  workflow_dispatch:
  push:
    branches: [ 'master', 'dev' ]
    paths:
      - 'packages/client/**'
  pull_request:
    branches: [ 'master', 'dev' ]
    paths:
      - 'packages/client/**'

env:
  CLIENT_CONTAINER: client
  CLIENT_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:client
  CLIENT_PORT: ${{ secrets.DOCKER_NETWORK_CLIENT_PORT }}
jobs:
  ci:
    name: Client CI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Create Docker network
        run: |
          docker network create \
            --driver bridge \
            --subnet ${{ secrets.DOCKER_NETWORK_SUBNET }} \
            --gateway ${{ secrets.DOCKER_NETWORK_GATEWAY }} \
            --ip-range ${{ secrets.DOCKER_NETWORK_IP_RANGE }} \
            ${{ secrets.DOCKER_NETWORK }}

      - name: Build test client image
        run: |
          docker build \
            --file docker/configs/client/Dockerfile.test \
            --tag ${CLIENT_IMAGE}-test \
            --build-arg PORT=$CLIENT_PORT \
            .

      - name: Run client test
        run: |
          docker run \
            --name ${CLIENT_CONTAINER}-test \
            --publish $CLIENT_PORT:$CLIENT_PORT \
            --net "${{ secrets.DOCKER_NETWORK }}" \
            --ip "${{ secrets.DOCKER_NETWORK_CLIENT_IP }}" \
            --env NODE_ENV=testing \
            --env APP_ID="${{ vars.APP_ID }}" \
            --env APP_NAME="${{ vars.APP_NAME }}" \
            --env SERVER_PUBLIC_FILE_MAX_SIZE_B="${{ vars.SERVER_PUBLIC_FILE_MAX_SIZE_B }}" \
            --env SERVER_PUBLIC_ALLOWED_EXTENSIONS="${{ vars.SERVER_PUBLIC_ALLOWED_EXTENSIONS }}" \
            --env SPECS_HOOK_TIMEOUT_MS="${{ vars.SPECS_HOOK_TIMEOUT_MS }}" \
            --env BE_ORIGIN=http://"${{ secrets.SERVER_HOST }}":"${{ secrets.SERVER_PORT }}" \
            ${CLIENT_IMAGE}-test
  cd:
    name: Client CD
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    needs: ci
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Build production client image
        run: |
          docker build \
            --file docker/configs/client/Dockerfile.prod \
            --tag ${CLIENT_IMAGE}-prod \
            --build-arg PORT=$CLIENT_PORT \
            .

      - name: Login to DockerHub registry
        run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      - name: Push production client image
        run: docker push "${CLIENT_IMAGE}-prod"

      - name: Pull and run client image on remote host
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          envs:
            CLIENT_IMAGE,
            CLIENT_CONTAINER,
            CLIENT_PORT
          script: |
            set -e
            export CLIENT_IMAGE_PROD="${CLIENT_IMAGE}-prod"
            export OLD_IMAGE_ID=$(docker images -q $CLIENT_IMAGE_PROD)$(echo "fallback")
            
            echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
            docker pull $CLIENT_IMAGE_PROD

            docker stop $CLIENT_CONTAINER || true
            docker container rm -f $CLIENT_CONTAINER
            docker image rm -f $OLD_IMAGE_ID
            
            docker run -dit \
              --restart unless-stopped \
              --name $CLIENT_CONTAINER \
              --publish $CLIENT_PORT:$CLIENT_PORT \
              --net ${{ secrets.DOCKER_NETWORK }} \
              --ip ${{ secrets.DOCKER_NETWORK_CLIENT_IP }} \
              --env NODE_ENV=production \
              --env-file $(pwd)/env/client/.env \
              $CLIENT_IMAGE_PROD

            docker ps
