name: Database CI/CD

on:
  workflow_dispatch:
  push:
    branches: [ 'master', 'dev' ]
    paths:
      - 'database/*'
  pull_request:
    branches: [ 'master', 'dev' ]
    paths:
      - 'database/*'

env:
  DATABASE_CONTAINER: database
  DATABASE_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:database
  DATABASE_PORT: ${{ secrets.DOCKER_NETWORK_DATABASE_PORT }}
jobs:
  ci:
    name: Database CI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Create Docker network
        run: |
          docker network create \
            --driver bridge \
            --subnet ${{ secrets.DOCKER_NETWORK_SUBNET }} \
            --gateway ${{ secrets.DOCKER_NETWORK_GATEWAY }} \
            --ip-range ${{ secrets.DOCKER_NETWORK_IP_RANGE }} \
            ${{ secrets.DOCKER_NETWORK }}

      - name: Build test database image
        run: |
          docker build \
          --file docker/configs/database/Dockerfile \
          --tag "${DATABASE_IMAGE}-test" \
          --build-arg DOCKER_NETWORK_DATABASE_PORT=$DATABASE_PORT \
          .

      - name: Run database test
        run: |
          docker run -d \
            --name ${DATABASE_CONTAINER}-test \
            --publish $DATABASE_PORT:$DATABASE_PORT \
            --net ${{ secrets.DOCKER_NETWORK }} \
            --ip ${{ secrets.DOCKER_NETWORK_DATABASE_IP }} \
            --env MYSQL_ROOT_PASSWORD=${{ secrets.DATABASE_PASSWORD }} \
            ${DATABASE_IMAGE}-test
          
          timeout=70
          while [ $(docker inspect --format "{{json .State.Health.Status }}" ${DATABASE_CONTAINER}-test | grep -wv "healthy") ]; do
            if [[ $timeout < 0 ]]; then
              echo "Timed out!"
              exit 1
            fi
            echo "Waiting for container healthy status..."
            sleep 1
            timeout=$(($timeout - 1))
          done
  cd:
    name: Database CD
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    needs: ci
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Build production database image
        run: |
          docker build \
          --file docker/configs/database/Dockerfile \
          --tag "${DATABASE_IMAGE}-prod" \
          --build-arg DATABASE_PORT=$DATABASE_PORT \
          .

      - name: Login to DockerHub registry
        run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      - name: Push production database image
        run: docker push "${DATABASE_IMAGE}-prod"

      - name: Pull and run database image on remote host
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          envs:
            DATABASE_CONTAINER,
            DATABASE_IMAGE,
            DATABASE_PORT
          script: |
            set -e
            export DATABASE_IMAGE_PROD=${DATABASE_IMAGE}-prod
            export OLD_IMAGE_ID=$(docker images -q $DATABASE_IMAGE_PROD)$(echo "fallback")
            
            echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
            # docker pull $DATABASE_IMAGE_PROD

            docker stop $DATABASE_CONTAINER || true
            docker container rm -f $DATABASE_CONTAINER
            docker image rm -f $OLD_IMAGE_ID
            
            docker run -dit \
              --restart unless-stopped \
              --name $DATABASE_CONTAINER \
              --publish $DATABASE_PORT:$DATABASE_PORT \
              --net ${{ secrets.DOCKER_NETWORK }} \
              --ip ${{ secrets.DOCKER_NETWORK_DATABASE_IP }} \
              --env-file $(pwd)/env/database/.env \
              $DATABASE_IMAGE_PROD

            docker ps
