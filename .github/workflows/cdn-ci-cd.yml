name: CDN CI/CD

on:
  workflow_dispatch:
  push:
    branches: [ 'master', 'dev' ]
  pull_request:
    branches: [ 'master', 'dev' ]

env:
  CDN_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:cdn

  JWT_SECRET: ${{ secrets.JWT_SECRET }}

  # Common
  BRANCH_DEV: ${{ vars.BRANCH_DEV }}
  GITHUB_REF: ${{ github.ref }}

  SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
  SSH_USERNAME: ${{ secrets.SSH_USERNAME }}

  DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKER_NETWORK: ${{ vars.DOCKER_NETWORK }}
  DOCKER_NETWORK_GATEWAY: ${{ vars.DOCKER_NETWORK_GATEWAY }}
  DOCKER_NETWORK_IP_RANGE: ${{ vars.DOCKER_NETWORK_IP_RANGE }}
  DOCKER_NETWORK_SUBNET: ${{ vars.DOCKER_NETWORK_SUBNET }}

  CDN_IP: ${{ vars.CDN_IP }}
  CDN_PORT: ${{ vars.CDN_PORT }}
  CLIENT_IP: ${{ vars.CLIENT_IP }}
  DATABASE_IP: ${{ vars.DATABASE_IP }}
  DATABASE_PORT: ${{ vars.DATABASE_PORT }}
  NGINX_PORT: ${{ vars.NGINX_PORT }}
  SERVER_PORT_HTTP: ${{ vars.SERVER_PORT_HTTP }}
  SERVER_PORT_WS: ${{ vars.SERVER_PORT_WS }}
  SSH_HOST: ${{ secrets.SSH_HOST }}
  SSH_PORT: ${{ vars.SSH_PORT }}

  CONNECTION_CHECK_INTERVAL_MS: ${{ vars.CONNECTION_CHECK_INTERVAL_MS }}
  SPECS_DATA_AMOUNT: ${{ vars.SPECS_DATA_AMOUNT }}
  SPECS_HOOK_TIMEOUT_MS: ${{ vars.SPECS_HOOK_TIMEOUT_MS }}

jobs:
  check:
    name: Check files
    outputs:
      delta: ${{ steps.check.outputs.delta }}
    runs-on: ubuntu-latest
    env:
      EVENT_NAME: ${{ github.event_name }}
      EVENT_BEFORE: ${{ github.event.before }}
      EVENT_AFTER: ${{ github.event.after }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: ${{ github.event_name == 'pull_request' && 2 || 0 }}

      - name: Check modified CDN source files
        id: check
        shell: bash
        run: bash scripts/check-files.sh cdn

  ci:
    name: CDN CI
    runs-on: ubuntu-latest
    needs: check
    if: needs.check.outputs.delta == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Create Docker network
        run: |
          docker network create \
            --driver bridge \
            --subnet $DOCKER_NETWORK_SUBNET \
            --gateway $DOCKER_NETWORK_GATEWAY \
            --ip-range $DOCKER_NETWORK_IP_RANGE \
            $DOCKER_NETWORK

      - name: Login to DockerHub registry
        run: echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin

      - name: Compose CDN test
        run: docker compose --verbose --file docker/docker-compose.test.yml --profile cdn up --build --abort-on-container-exit

      - name: Push test cdn image
        if: github.ref != 'refs/heads/master'
        run: docker push $CDN_IMAGE

  cd:
    name: CDN CD
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    needs: ci
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Build production CDN image
        run: |
          docker build \
            --file docker/configs/cdn/Dockerfile.prod \
            --tag "${CDN_IMAGE}-prod" \
            --build-arg CDN_PORT=$CDN_PORT \
            .

      - name: Login to DockerHub registry
        run: echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin

      - name: Push production CDN image
        run: docker push "${CDN_IMAGE}-prod"

      - name: Pull and run CDN image on remote host
        uses: appleboy/ssh-action@v1.0.0
        env:
          CDN_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:cdn
          CDN_CONTAINER: cdn

          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
          DOCKER_NETWORK: ${{ vars.DOCKER_NETWORK }}

          CDN_IP: ${{ vars.CDN_IP }}
          CDN_PORT: ${{ vars.CDN_PORT }}
        with:
          host: $SSH_HOST
          port: $SSH_PORT
          username: $SSH_USERNAME
          password: $SSH_PASSWORD
          envs:
            CDN_IMAGE,
            CDN_CONTAINER,
            
            DOCKERHUB_USERNAME,
            DOCKERHUB_PASSWORD,
            DOCKER_NETWORK,
            
            CDN_IP,
            CDN_PORT,
            
            NODE_ENV,
            CDN_IMAGE_PROD,
            OLD_IMAGE
          script: |
            set -e
            export CDN_IMAGE=$CDN_IMAGE
            export CDN_CONTAINER=$CDN_CONTAINER
            
            export DOCKER_NETWORK=$DOCKER_NETWORK
            export DOCKERHUB_USERNAME=$DOCKERHUB_USERNAME
            export DOCKERHUB_PASSWORD=$DOCKERHUB_PASSWORD   
            
            export CDN_IP=$CDN_IP
            export CDN_PORT=$CDN_PORT
            
            export NODE_ENV=prod
            export CDN_IMAGE_PROD="${CDN_IMAGE}-prod"
            
            echo $CDN_IMAGE
            export OLD_IMAGE=$(docker images -q $CDN_IMAGE_PROD)$(echo "fallback")
            
            echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin
            docker pull $CDN_IMAGE_PROD

            docker stop $CDN_CONTAINER || true
            docker container rm -f $CDN_CONTAINER
            docker image rm -f $OLD_IMAGE
            
            command="docker run -dit \
              --restart unless-stopped \
              --publish $CDN_PORT:$CDN_PORT \
              --name $CDN_CONTAINER \
              --net $DOCKER_NETWORK \
              --ip $CDN_IP \
              --env CDN_PORT \
              --env NODE_ENV \
              $CDN_IMAGE_PROD"
            echo $command
            eval $command
            docker ps
