FROM node:18 as base
WORKDIR /usr/src/app/

RUN --mount=type=cache,target=~/AppData/Local/Yarn/Cache/v4 \
    --mount=type=bind,source=lerna.json,target=lerna.json \
    --mount=type=bind,source=.yarnrc,target=.yarnrc \
    --mount=type=bind,source=.yarn,target=.yarn \
    --mount=type=bind,source=package.json,rw,target=package.json \
    --mount=type=bind,source=packages/shared/package.json,target=packages/shared/package.json \
    --mount=type=bind,source=packages/server/package.json,target=packages/server/package.json \
    --mount=type=bind,source=yarn.lock,rw,target=yarn.lock \
    yarn install --non-interactive --ignore-scripts --production=true \
    && yarn add lerna -W --dev --non-interactive

COPY --chown=app:app ./packages/server/src/ ./packages/server/src/
COPY --chown=app:app ./packages/shared/src*/ ./packages/shared/src/

RUN --mount=type=cache,target=~/AppData/Local/Yarn/Cache/v4 \
    --mount=type=bind,source=lerna.json,target=lerna.json \
    --mount=type=bind,source=package.json,target=package.json \
    --mount=type=bind,source=packages/shared/package.json,target=packages/shared/package.json \
    --mount=type=bind,source=packages/shared/tsconfig.json,target=packages/shared/tsconfig.json \
    --mount=type=bind,source=packages/server/package.json,target=packages/server/package.json \
    --mount=type=bind,source=packages/server/tsconfig.json,target=packages/server/tsconfig.json \
    --mount=type=bind,source=packages/server/tsconfig.build.json,target=packages/server/tsconfig.build.json \
     yarn build server

FROM node:18-alpine
ARG PORT_HTTP
ARG PORT_WS
WORKDIR /usr/src/app/

COPY --from=base /usr/src/app/packages/server/dist/ ./dist/
COPY --from=base /usr/src/app/node_modules/ ./node_modules/

HEALTHCHECK --interval=10s \
    --timeout=3s \
    --retries=5 \
    CMD node healthcheck.js

EXPOSE $PORT_HTTP $PORT_WS
CMD ["node", "dist", "index.js"]