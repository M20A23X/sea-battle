version: '3.4'
services:
  database:
    build:
      context: ../
      dockerfile: docker/configs/database/Dockerfile
      args:
        PORT: ${DOCKER_NETWORK_DATABASE_PORT}
    restart: always
    env_file: ../.env
    ports:
      - ${DOCKER_NETWORK_DATABASE_PORT}:${DOCKER_NETWORK_DATABASE_PORT}
    networks:
      games-network:
        ipv4_address: ${DOCKER_NETWORK_DATABASE_IP}
    profiles:
      - full
      - backend
      - database

  server:
    build:
      context: ../
      args:
        PORT_HTTP: ${DOCKER_NETWORK_SERVER_PORT_HTTP}
        PORT_WS: ${DOCKER_NETWORK_SERVER_PORT_WS}
    env_file: ../.env
    ports:
      - ${DOCKER_NETWORK_SERVER_PORT_HTTP}:${DOCKER_NETWORK_SERVER_PORT_HTTP}
      - ${DOCKER_NETWORK_SERVER_PORT_WS}:${DOCKER_NETWORK_SERVER_PORT_WS}
    depends_on:
      database:
        condition: service_healthy
    networks:
      games-network:
        ipv4_address: ${DOCKER_NETWORK_SERVER_IP}
    profiles:
      - full
      - backend

  client:
    build:
      context: ../
      args:
        PORT: ${DOCKER_NETWORK_CLIENT_PORT}
    env_file: ../.env
    ports:
      - ${DOCKER_NETWORK_CLIENT_PORT}:${DOCKER_NETWORK_CLIENT_PORT}
    networks:
      games-network:
        ipv4_address: ${DOCKER_NETWORK_CLIENT_IP}
    profiles:
      - full
      - client